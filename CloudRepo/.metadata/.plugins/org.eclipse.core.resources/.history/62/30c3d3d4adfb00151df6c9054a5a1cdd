import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;



public class TfIdf {

	 
	/**
	 * WordFrequenceInDocMapper implements the Job 1 specification for the TF-IDF algorithm
	 */
	public static class WordFrequenceInDocMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
	 
		private static Set<String> googleStopwords;
		public WordFrequenceInDocMapper() {
	    }
	 
	    /**
	     * Google's search Stopwords
	     */
	    
	 
	    static {
	        googleStopwords = new HashSet<String>();
	        googleStopwords.add("I"); googleStopwords.add("a");
	        googleStopwords.add("about"); googleStopwords.add("an");
	        googleStopwords.add("are"); googleStopwords.add("as");
	        googleStopwords.add("at"); googleStopwords.add("be");
	        googleStopwords.add("by"); googleStopwords.add("com");
	        googleStopwords.add("de"); googleStopwords.add("en");
	        googleStopwords.add("for"); googleStopwords.add("from");
	        googleStopwords.add("how"); googleStopwords.add("in");
	        googleStopwords.add("is"); googleStopwords.add("it");
	        googleStopwords.add("la"); googleStopwords.add("of");
	        googleStopwords.add("on"); googleStopwords.add("or");
	        googleStopwords.add("that"); googleStopwords.add("the");
	        googleStopwords.add("this"); googleStopwords.add("to");
	        googleStopwords.add("was"); googleStopwords.add("what");
	        googleStopwords.add("when"); googleStopwords.add("where");
	        googleStopwords.add("who"); googleStopwords.add("will");
	        googleStopwords.add("with"); googleStopwords.add("and");
	        googleStopwords.add("the"); googleStopwords.add("www");
	    }
	 
	    /**
	     * @param key is the byte offset of the current line in the file;
	     * @param value is the line from the file
	     * @param output has the method "collect()" to output the key,value pair
	     * @param reporter allows us to retrieve some information about the job (like the current filename)
	     *
	     *     POST-CONDITION: Output <"word", "filename@offset"> pairs
	     */
	    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	        // Compile all the words using regex
	        Pattern p = Pattern.compile("\\w+");
	        Matcher m = p.matcher(value.toString());
	 
	        // Get the name of the file from the inputsplit in the context
	        String fileName = ((FileSplit) context.getInputSplit()).getPath().getName();
	 
	        // build the values and write <k,v> pairs through the context
	        StringBuilder valueBuilder = new StringBuilder();
	        while (m.find()) {
	            String matchedKey = m.group().toLowerCase();
	            // remove names starting with non letters, digits, considered stopwords or containing other chars
	            if (!Character.isLetter(matchedKey.charAt(0)) || Character.isDigit(matchedKey.charAt(0))
	                    || googleStopwords.contains(matchedKey) || matchedKey.contains("_")) {
	                continue;
	            }
	            valueBuilder.append(matchedKey);
	            valueBuilder.append("@");
	            valueBuilder.append(fileName);
	            // emit the partial <k,v>
	            context.write(new Text(valueBuilder.toString()), new IntWritable(1));
	        }
	    }
	}
	
	// (c) Copyright 2009 Cloudera, Inc.
	// Hadoop 0.20.1 API Updated by Marcello de Sales (marcello.desales@gmail.com)
	 
	
	 
	 
	/**
	 * LineIndexReducer Takes a list of filename@offset entries for a single word and concatenates them into a list.
	 */
	public class WordFrequenceInDocReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
	 
	    public WordFrequenceInDocReducer() {
	    }
	 
	    /**
	     * @param key is the key of the mapper
	     * @param values are all the values aggregated during the mapping phase
	     * @param context contains the context of the job run
	     *
	     *      PRE-CONDITION: receive a list of <"word@filename",[1, 1, 1, ...]> pairs
	     *        <"marcello@a.txt", [1, 1]>
	     *
	     *      POST-CONDITION: emit the output a single key-value where the sum of the occurrences.
	     *        <"marcello@a.txt", 2>
	     */
	    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	 
	        int sum = 0;
	        for (IntWritable val : values) {
	            sum += val.get();
	        }
	        //write the key and the adjusted value (removing the last comma)
	        context.write(key, new IntWritable(sum));
	    }
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
