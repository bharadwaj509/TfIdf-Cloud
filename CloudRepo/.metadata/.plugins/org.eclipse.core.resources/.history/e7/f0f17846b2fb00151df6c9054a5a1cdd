import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;



public class TfIdf {

	 
	/**
	 * WordFrequenceInDocMapper implements the Job 1 specification for the TF-IDF algorithm
	 */
	public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
	 
		public static Set<String> googleStopwords;
		
		static {
	        googleStopwords = new HashSet<String>();
	        googleStopwords.add("I"); googleStopwords.add("a");
	        googleStopwords.add("about"); googleStopwords.add("an");
	        googleStopwords.add("are"); googleStopwords.add("as");
	        googleStopwords.add("at"); googleStopwords.add("be");
	        googleStopwords.add("by"); googleStopwords.add("com");
	        googleStopwords.add("de"); googleStopwords.add("en");
	        googleStopwords.add("for"); googleStopwords.add("from");
	        googleStopwords.add("how"); googleStopwords.add("in");
	        googleStopwords.add("is"); googleStopwords.add("it");
	        googleStopwords.add("la"); googleStopwords.add("of");
	        googleStopwords.add("on"); googleStopwords.add("or");
	        googleStopwords.add("that"); googleStopwords.add("the");
	        googleStopwords.add("this"); googleStopwords.add("to");
	        googleStopwords.add("was"); googleStopwords.add("what");
	        googleStopwords.add("when"); googleStopwords.add("where");
	        googleStopwords.add("who"); googleStopwords.add("will");
	        googleStopwords.add("with"); googleStopwords.add("and");
	        googleStopwords.add("the"); googleStopwords.add("www");
	    }
	 
	    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	        Pattern p = Pattern.compile("\\w+");
	        Matcher m = p.matcher(value.toString());
	        String fileName = ((FileSplit) context.getInputSplit()).getPath().getName();
	        StringBuilder valueBuilder = new StringBuilder();
	        while (m.find()) {
	            String matchedKey = m.group().toLowerCase();
	            if (!Character.isLetter(matchedKey.charAt(0)) || Character.isDigit(matchedKey.charAt(0))
	                    || googleStopwords.contains(matchedKey) || matchedKey.contains("_")) {
	                continue;
	            }
	            valueBuilder.append(matchedKey);
	            valueBuilder.append("@");
	            valueBuilder.append(fileName);
	            // emit the partial <k,v>
	            context.write(new Text(valueBuilder.toString()), new IntWritable(1));
	        }
	    }
	}
	
	public class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {
	    public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	 
	        int sum = 0;
	        for (IntWritable val : values) {
	            sum += val.get();
	        }
	        //write the key and the adjusted value (removing the last comma)
	        context.write(key, new IntWritable(sum));
	    }
	}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		// TODO Auto-generated method stub
		Configuration conf = new Configuration();
        
        @SuppressWarnings("deprecation")
		Job job = new Job(conf, "TfIdf");
        
        job.setJarByClass(TfIdf.class);
        job.setMapperClass(Map.class);
        job.setReducerClass(Reduce.class);
        job.setCombinerClass(Reduce.class);
 
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
 
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
        
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
 
        job.waitForCompletion(true);
	}

}
